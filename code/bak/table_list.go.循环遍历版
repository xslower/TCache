package main

import (
	"sync"
)

func _newSList() IList {
	return NewSortedList()
}
func _newList() IList {
	return NewList()
}

/**
 * 有序表不比无序比更占内存，所以用有序表代替无序表和有序表
 */
func NewListTable(m *Memory, s bool) *ListTable {
	var lt = &ListTable{Mem: m}
	lt.Keys = make([]uint32, MIN_LEN)
	lt.Vals = make([]IList, MIN_LEN)
	lt.holes = *NewHole()
	if s {
		lt.newList = _newSList
	} else {
		lt.newList = _newList
	}
	return lt
}

type ListTable struct {
	Keys    []uint32
	Vals    []IList
	Mem     *Memory
	holes   Hole
	mtx     sync.Mutex
	newList func() IList
	tail    uint32
	lclMem  uint32 //本地内存池
	Visit   uint16 //访问的次数，用来调节内存
}

func (this *ListTable) enlarge(count uint32) {
	var tk = this.Keys
	var tv = this.Vals
	this.Keys = make([]uint32, len(tk)+int(count))
	this.Vals = make([]IList, len(tv)+int(count))
	copy(this.Keys, tk[:this.tail])
	copy(this.Vals, tv[:this.tail])
}

/**
 * 根据holes中记录的洞的位置，通过循环移动内存把洞补上
 */
func (this *ListTable) trimHole() uint32 {
	var hls = this.holes.ClearAll()
	var ln = len(hls)
	var dis uint32 = 1
	var head, tail uint32
	for i := 0; i < ln; i++ {
		head = hls[i] + 1
		if i+1 == ln {
			tail = this.tail
		} else {
			tail = hls[i+1]
		}
		copy(this.Keys[head-dis:tail], this.Keys[head:tail])
		copy(this.Vals[head-dis:tail], this.Vals[head:tail])
		dis++
	}
	return uint32(ln)
}

func (this *ListTable) moveToHead(start uint32) {
	copy(this.Keys, this.Keys[start:this.tail])
	copy(this.Vals, this.Vals[start:this.tail])
	this.tail -= start
	//移动内存位置后，洞的位置也会偏移，需要修正
	this.holes.Move(start)
}

//删除列表前count个元素，通过总Cap来计算总共的释放的内存单元
func (this *ListTable) freeMem(count uint32) (total uint32) {
	for i := uint32(0); i < count; i++ {
		total += this.Vals[i].Cap()
	}
	this.moveToHead(count)
	return
}

/**
 * 因为此table要管理本身slot和list数组两份内存，所以在申请内存成功后判断slot是否用光，用光则enlarge本身；失败则删除数据释放内存顺便留出slot
 */
func (this *ListTable) askForMem(count uint32) {
	/**
	 *这里list以INTS_STEP单位增加和减少大小，每个list单元2单位，而table的slot占3单位，以2为单位
	 */
	var size = count * INTS_STEP
	if this.Mem.AskFor(int(size * 2)) {
		this.lclMem += size
	} else { //申请不到内存则删除前面的key空出空间
		var total = this.freeMem(count)
		this.lclMem += total
	}
}

func (this *ListTable) leftSpace() uint32 {
	var ret = uint32(len(this.Keys)) + this.holes.Len() - this.tail
	return ret
}

func (this *ListTable) search(key uint32) uint32 {
	for i := int(this.tail) - 1; i >= 0; i-- {
		if this.Keys[i] == key {
			return uint32(i)
		}
	}
	return this.tail
}

func (this *ListTable) visit(pos uint32) {
	this.Visit++
	//数量太少，或已经是最常使用的，无需再操作
	if this.tail < RECENT_NUM || this.tail < pos+RECENT_NUM {
		return
	}
	if this.holes.IsFull() {
		this.trimHole()
	}
	var key = this.Keys[pos]
	var val = this.Vals[pos]
	this.Keys[pos] = 0
	this.Vals[pos] = nil
	var newPos = this.holes.Replace(pos)
	if newPos == pos { //说明没有合适的洞
		newPos = this.tail
		this.tail++
	}
	this.Keys[newPos] = key
	this.Vals[newPos] = val
}

func (this *ListTable) Get(key uint32) IList {
	this.mtx.Lock()
	var ret IList = nil
	var pos = this.search(key)
	if pos < this.tail {
		ret = this.Vals[pos]
		this.visit(pos)
	}
	this.mtx.Unlock()
	return ret
}

/**
 * 1.先判断内存池剩余内存是否足够，不够则申请内存或删除数据释放内存，同时如果slot满了或者enlarge或者删除数据释放slot
 * 2.
 */
func (this *ListTable) Set(key uint32, val int64) {
	var step = LCL_MEM_STEP
	this.mtx.Lock()
	if this.lclMem < INTS_STEP {
		this.askForMem(step)
	}
	var list IList = nil
	var pos = this.search(key)
	if pos == this.tail { //没有此key则新建list，有洞插洞，无洞插后
		var newPos = this.holes.Pop(this.tail)
		if newPos == this.tail {
			this.tail++
			if this.leftSpace() < 1 {
				this.enlarge(step)
				this.lclMem -= step * 3 / 2
			}
		}
		list = this.newList()
		this.Keys[newPos] = key
		this.Vals[newPos] = list
		this.lclMem -= INTS_STEP
	} else { //有这个key则判断是否已满，如enlarge成功则减内存池内存
		list = this.Vals[pos]
		if list.IsFull() {
			if list.Enlarge(INTS_STEP) {
				this.lclMem -= INTS_STEP
			}
		}
	}
	list.Push(val)
	this.mtx.Unlock()
}

func (this *ListTable) Del(key uint32) {
	this.mtx.Lock()
	var pos = this.search(key)
	if pos < this.tail {
		if this.holes.IsFull() {
			this.trimHole()
		}
		this.holes.Set(pos)
		this.Keys[pos] = 0
	}
	this.mtx.Unlock()
}
